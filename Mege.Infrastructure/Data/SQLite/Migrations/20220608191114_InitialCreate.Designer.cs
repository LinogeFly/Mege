// <auto-generated />
using System;
using Mege.Infrastructure.Data.SQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mege.Infrastructure.Data.SQLite.Migrations
{
    [DbContext(typeof(SQLiteDbContext))]
    [Migration("20220608191114_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("Mege.Infrastructure.Data.SQLite.PersistedMemeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MemeTemplates", (string)null);
                });

            modelBuilder.Entity("Mege.Infrastructure.Data.SQLite.PersistedMemeTemplateTextLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Left")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersistedMemeTemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MemeTemplateId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Top")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PersistedMemeTemplateId");

                    b.ToTable("MemeTemplateTextLines", (string)null);
                });

            modelBuilder.Entity("Mege.Infrastructure.Data.SQLite.PersistedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Mege.Infrastructure.Data.SQLite.PersistedMemeTemplateTextLine", b =>
                {
                    b.HasOne("Mege.Infrastructure.Data.SQLite.PersistedMemeTemplate", null)
                        .WithMany("TextLines")
                        .HasForeignKey("PersistedMemeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mege.Infrastructure.Data.SQLite.PersistedMemeTemplate", b =>
                {
                    b.Navigation("TextLines");
                });
#pragma warning restore 612, 618
        }
    }
}
